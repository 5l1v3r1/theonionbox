## Configuration File for TheOnionBox
[config]
protocol = 1

[TheOnionBox]
## Address of your Onion Box;
## probably should be '0.0.0.0' (preferred)
## or 'localhost', yet might be something
## else, eg when operating with several ip's:
# host = localhost
## listen on all interfaces
host = 0.0.0.0

## Port for the Web Server
## 8080 should be fine in most cases!
port = 8080

## To define the lower threshold for the notification system.
## Possible setting are DEBUG, INFO, NOTICE, WARNING, ERROR
## defaults to NOTICE, case insensitive
message_level = NOTICE

## Per default, the Box operates at the root level of a domain e.g. http://localhost:8080/.
## If you intend to operate it (behind a proxy!) at a deeper level (e.g. @ http://my.server.com/theonionbox/)
## you have to define that base path here. You are not limited to a single path element.
## Please assure that this is an absolute filepath yet without the domain:port, beginning with a leading slash,
## no trailing slash, no quotation marks:
## proxy_path = /theonionbox

## The acceptable duration in seconds between two communication events of a client to the Box.
## If this duration is exceeded, the Box will expire the session.
session_ttl = 300
## Note: This is applicable for login procedures as well as monitoring activities.
## Note: The minimum duration accepted == 30, max == 3600. Values will be forced into that range.

## Shall we operate with SSL?
## Note: To actually make this running, you have to create a valid ssl certificate first:
## So run e.g.
## openssl req -new -x509 -keyout server.pem -out server.pem -days 365 -nodes
##
## DON'T distribute this combined private/public key to clients!
## (see http://www.piware.de/2011/01/creating-an-https-server-in-python/#comment-11380)
##
## Default is 'no'!
# ssl = no
# ssl = yes
#
## The file that holds the Certificate!
# ssl_certificate = server.pem
## The file that holds the Key!
# ssl_key = private_key.pem

## When a NTP server is provided
## we use it's time to compensate the server's clock
## ntp_server = pool.ntp.org
## ntp_server = fritz.box

## Tor ships with the GeoIPLight2 Country DB
## If you're interested in a more precise indication, you should install the GeoIP City DB
## e.g. from http://dev.maxmind.com/geoip/geoip2/geolite2/ and define here the path to the db file.
## Both flavours (Full or Light) are supported.
# geoip2_city = path/to/geoip2/city/db.mmdb
## Be aware that you need to install python module 'geoip2' as well to access those information.

## Your box once in a while checks if there is a new version of The Onion Box available.
## This info is collected from a hidden service established.
## If you don't like to receive this info, you may disable it here:
# disable_new_version_check = yes


[TorProxy]
## Address:Port of the Tor proxy to operate with
## v3.2: Only used to query onionoo network data
# tor_proxy = 127.0.0.1:9050

[TorRelay]
## How shall we establish the connection to the relay?
## => via a ControlSocket (define additionally tor_control_socket):
# tor_control = socket
## => via a ControlPort (define additionally tor_host & tor_control_port):
# tor_control = port
## => via a Proxy (define tor_proxy and set tor_host to an address reachable through this proxy):
# tor_control = proxy
## Note: This defaults to tor_control = port if not defined!
tor_control = port

## Address of this Tor instance
## Do NOT use 'localhost' but 127.0.0.1 to connect locally
tor_host = 127.0.0.1

## ControlPort of this Tor instance
tor_control_port = 9051

## ControlSocket of this Tor instance
# tor_control_socket = /var/run/tor/control


## Timeout when connecting to Tor.
## Usually the connection should be established very quick;
## you may increase this if connecting to very remote systems.
# tor_control_timeout = 60

## The Number of Seconds we keep the connection to
## Tor open after the last user disconnected.
## Hint: The minimum reasonable TTL is > 30(s)
## eg. 1 day
# tor_ttl = 86400
## eg. 1 hour
# tor_ttl = 3600
## eg. forever
# tor_ttl = -1
tor_ttl = 30


## Switches to preserve the messages of the Relay
## Up to 400 messages (total) will be preserved
## The severity of these messages can be defined here
## There's one switch for ERR, WARN & NOTICE
## There's NO switch for INFO & DEBUG (as this would flood the memory without true value)
## Live - transmission of messages can be switched on/off in the client

# tor_preserve_ERR = no
tor_preserve_ERR = yes
# tor_preserve_WARN = no
tor_preserve_WARN = yes
# tor_preserve_NOTICE = no
tor_preserve_NOTICE = yes


